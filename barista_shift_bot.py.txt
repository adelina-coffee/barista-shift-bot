# barista_shift_bot.py

import os
import asyncio
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://barista-bot.cyclic.app

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

KALININGRAD_TZ = pytz.timezone("Europe/Kaliningrad")
scheduler = AsyncIOScheduler(timezone=KALININGRAD_TZ)

CHAT_ID = -1000000000000  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π chat_id
FORUM_TOPIC_IDS = {
    "–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç": 1,
    "–ù–∞–¥–æ –∑–∞–∫–∞–∑–∞—Ç—å": 2,
}

async def send_reminder(chat_id: int, topic_id: int, message: str):
    await bot.send_message(chat_id=chat_id, message_thread_id=topic_id, text=message)

def schedule_reminders():
    scheduler.add_job(
        send_reminder,
        trigger='cron',
        day_of_week='wed',
        hour=7, minute=30,
        args=[CHAT_ID, FORUM_TOPIC_IDS["–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"],
              "@dobro_kld –°–µ–≥–æ–¥–Ω—è –ß–ï–†–ù–ê–Ø –°–†–ï–î–ê ‚òïÔ∏è –£–≥–æ—â–∞–µ–º –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä –∫–æ—Ñ–µ üòÑ"]
    )
    scheduler.add_job(
        send_reminder,
        trigger='cron',
        day_of_week='wed,sun',
        hour=8, minute=10,
        args=[CHAT_ID, FORUM_TOPIC_IDS["–ù–∞–¥–æ –∑–∞–∫–∞–∑–∞—Ç—å"],
              "‚ÄºÔ∏è –ö–æ—Ç–∏–∫–∏, —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∫ –∑–∞–∫—É–ø—É! üôå –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π! :)"]
    )

@dp.startup()
async def on_startup():
    schedule_reminders()
    scheduler.start()
    await bot.set_webhook(WEBHOOK_URL + "/webhook")

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running"

@app.route("/webhook", methods=["POST"])
async def webhook():
    update = types.Update.model_validate(request.json)
    await dp.feed_update(bot, update)
    return "ok"

def start():
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.environ.get("PORT", 3000)))

if __name__ == "__main__":
    asyncio.run(dp.startup())
    start()